---
http_interactions:
- request:
    method: get
    uri: https://digitalopera:VYnYQlZsDZW60gX00kK2txNdFo1Op2re@bitbucket.org/api/1.0/repositories/digitalopera/advantage-plan/changesets/ec7d502ca19aec4fc34c4043b372f54382b67d6d/diff
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.6.2
      Date:
      - Fri, 13 Mar 2015 22:06:11 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Render-Time:
      - '0.130170822144'
      Content-Language:
      - en
      X-Request-Count:
      - '471'
      X-Served-By:
      - app15
      Vary:
      - Authorization, Accept-Language, Cookie
      X-Frame-Options:
      - SAMEORIGIN
      X-Static-Version:
      - c524695e7f84
      X-Version:
      - c524695e7f84
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Cache-Status:
      - BYPASS
    body:
      encoding: ASCII-8BIT
      string: '[{"from_file":{"meta":{"numLines":172,"position":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171],"longestLine":{"html":"        policy.update_attribute
        :cancels_on, Time.at(subscription[:current_period_end].to_i).to_datetime"},"name":"from","filename":"app\/controllers\/web_hooks\/stripe_controller.rb"},"pages":[[{"html":"##","gutters":[]},{"html":"##
        Web Hooks that are implemented here:","gutters":[]},{"html":"#","gutters":[]},{"html":"#
        =&gt; invoice.created","gutters":[]},{"html":"# =&gt; invoice.payment_succeeded","gutters":[]},{"html":"#
        =&gt; invoice.payment_failed","gutters":[]},{"html":"# =&gt; ping","gutters":[]},{"html":"#
        =&gt; customer.subscription.deleted","gutters":[]},{"html":"#","gutters":[]},{"html":"#
        for more information on all available events: https:\/\/stripe.com\/docs\/api#event_types","gutters":[]},{"html":"##","gutters":[]},{"html":"class
        WebHooks::StripeController &lt; ApplicationController","gutters":[]},{"html":"  protect_from_forgery
        :except =&gt; :process_web_hook","gutters":[]},{"html":"  layout false","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        hello","gutters":[]},{"html":"    render :text =&gt; &quot;Hello there cowboy&quot;","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        process_web_hook","gutters":[]},{"html":"    # get the correct method from
        the type passed in by stripe","gutters":[]},{"html":"    method = params[:type].gsub(&#39;.&#39;,&#39;_&#39;).to_sym","gutters":[]},{"html":"","gutters":[]},{"html":"    #
        if the method exists, and livemode == true, send it along","gutters":[]},{"html":"    if
        self.private_methods.include?(method) &amp;&amp; params[:livemode]","gutters":[]},{"html":"      send
        method, params","gutters":[]},{"html":"    else","gutters":[]},{"html":"      head
        :ok","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  private
        #-----------------------------------------------","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        send_support_message(json, e)","gutters":[]},{"html":"    SupportMailer.send_generic_stripe_hook_notification(json,
        e).deliver!","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  ##
        process the deletion of a plan from Stripe","gutters":[]},{"html":"  def plan_deleted(json)","gutters":[]},{"html":"    begin","gutters":[]},{"html":"      stripe_plan_data
        = json[:data][:object]","gutters":[]},{"html":"","gutters":[]},{"html":"      if
        stripe_plan_data[:interval] == &#39;year&#39;","gutters":[]},{"html":"        plan
        = Plan.marked_for_deletion.find_by :annual_plan_stripe_id =&gt; stripe_plan_data[:id]","gutters":[]},{"html":"      else","gutters":[]},{"html":"        plan
        = Plan.marked_for_deletion.find_by :monthly_plan_stripe_id =&gt; stripe_plan_data[:id]","gutters":[]},{"html":"      end","gutters":[]},{"html":"","gutters":[]},{"html":"      unless
        plan.nil?","gutters":[]},{"html":"        plan.destroy","gutters":[]},{"html":"      end","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok","gutters":[]},{"html":"","gutters":[]},{"html":"    rescue Exception
        =&gt; e","gutters":[]},{"html":"      send_support_message(json, e)","gutters":[]},{"html":"      render
        status: :conflict, json: { errors: e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  #
        Occurs whenever a failed charge attempt occurs.","gutters":[]},{"html":"  def
        charge_failed(json)","gutters":[]},{"html":"    begin","gutters":[]},{"html":"      AdminMailer.charge_failed(
        json ).deliver","gutters":[]},{"html":"      head :ok","gutters":[]},{"html":"    rescue
        Exception =&gt; e","gutters":[]},{"html":"      send_support_message(json,
        e)","gutters":[]},{"html":"      render status: :conflict, json: { errors:
        e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        invoice_created(json)","gutters":[]},{"html":"    begin","gutters":[]},{"html":"      MembersMailer.invoice_created(json[:data][:object][:customer],
        json[:data][:object][:id]).deliver","gutters":[]},{"html":"      head :ok","gutters":[]},{"html":"    rescue
        Exception =&gt; e","gutters":[]},{"html":"      send_support_message(json,
        e)","gutters":[]},{"html":"      render status: :conflict, json: { errors:
        e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  ##
        A Policy has been successfully created","gutters":[]},{"html":"  def customer_subscription_created(json)","gutters":[]},{"html":"    begin","gutters":[]},{"end":true,"start":true,"html":"    #   data                =
        json[&quot;data&quot;].symbolize_keys!","gutters":[],"deletion":true},{"html":"      subscription_policy
        = SubscriptionUpdatePolicy.new(json[:data])","gutters":[]},{"html":"      subscription        =
        subscription_policy.subscription","gutters":[]},{"html":"      member              =
        Member.find subscription[:customer]","gutters":[]},{"html":"      policy              =
        member.current_policy","gutters":[]},{"end":true,"start":true,"html":"    #","gutters":[],"change":true},{"html":"      unless
        policy.status_active?","gutters":[]},{"html":"        policy.activate! if
        subscription[:status] == &#39;active&#39;","gutters":[]},{"html":"      end","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok","gutters":[]},{"html":"    rescue Exception =&gt; e","gutters":[]},{"html":"      send_support_message(json,
        e)","gutters":[]},{"html":"      render status: :conflict, json: { errors:
        e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]}],[{"html":"","gutters":[]},{"html":"  #
        def charge_succeeded(json)","gutters":[]},{"html":"  #   ## this method does
        nothing at the moment.  Doesn&#39;t need to.","gutters":[]},{"html":"  # end","gutters":[]},{"html":"","gutters":[]},{"html":"  ##
        Process updates to a subscription","gutters":[]},{"html":"  ## TODO: Should
        all of this logic be moved to a Service Object?","gutters":[]},{"html":"  def
        customer_subscription_updated(json)","gutters":[]},{"html":"    begin","gutters":[]},{"html":"      subscription_policy
        = SubscriptionUpdatePolicy.new(json[:data])","gutters":[]},{"html":"      subscription        =
        subscription_policy.subscription","gutters":[]},{"html":"      member              =
        Member.find subscription[:customer]","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok and return if member.nil? || member.current_policy.nil?","gutters":[]},{"html":"","gutters":[]},{"html":"      policy              =
        member.current_policy","gutters":[]},{"html":"","gutters":[]},{"html":"      if
        subscription_policy.canceled_at_end_of_term?","gutters":[]},{"html":"        policy.update_attribute
        :cancels_on, Time.at(subscription[:current_period_end].to_i).to_datetime","gutters":[]},{"html":"        policy.update_attribute
        :renews_on, nil","gutters":[]},{"html":"        MembersMailer.send_cancellation_confirmation(member.id.to_s).deliver","gutters":[]},{"html":"      else","gutters":[]},{"html":"        policy.update_attribute
        :renews_on, Time.at(subscription[:current_period_end].to_i).to_datetime","gutters":[]},{"html":"        policy.update_attribute
        :cancels_on, nil","gutters":[]},{"html":"      end","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok","gutters":[]},{"html":"    rescue Exception =&gt; e","gutters":[]},{"html":"      send_support_message(json,
        e)","gutters":[]},{"html":"      render status: :conflict, json: { errors:
        e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  #
        ## Policy has been canceled, or closed.","gutters":[]},{"html":"  def customer_subscription_deleted(json)","gutters":[]},{"html":"    begin","gutters":[]},{"html":"      subscription_policy
        = SubscriptionUpdatePolicy.new(json[:data])","gutters":[]},{"html":"      subscription        =
        subscription_policy.subscription","gutters":[]},{"html":"      member              =
        Member.find subscription[:customer]","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok and return if member.nil? || member.current_policy.nil?","gutters":[]},{"html":"","gutters":[]},{"html":"      policy              =
        member.current_policy","gutters":[]},{"html":"","gutters":[]},{"html":"      if
        subscription_policy.canceled?","gutters":[]},{"html":"        policy.cancel!","gutters":[]},{"html":"      end","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok","gutters":[]},{"html":"    rescue Exception =&gt; e","gutters":[]},{"html":"      send_support_message(json,
        e)","gutters":[]},{"html":"      render status: :conflict, json: { errors:
        e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  #
        Occurs whenever an invoice attempts to be paid, and the payment succeeds.","gutters":[]},{"html":"  def
        invoice_payment_succeeded(json)","gutters":[]},{"html":"    begin","gutters":[]},{"html":"      stripe_data   =
        json[:data][:object]","gutters":[]},{"html":"      total         = stripe_data[:total]
        || stripe_data[:amount]","gutters":[]},{"html":"      date          = stripe_data[:date]
        || stripe_data[:created]","gutters":[]},{"html":"","gutters":[]},{"html":"      MembersMailer.invoice_payment_succeeded(
        stripe_data[:customer], total, date ).deliver","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok","gutters":[]},{"html":"    rescue Exception =&gt; e","gutters":[]},{"html":"      send_support_message(json,
        e)","gutters":[]},{"html":"      render status: :conflict, json: { errors:
        e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"end","gutters":[]}]],"block_num":0},"hunks":[{"to_lines":[],"from_count":1,"to_start":85,"from_start":85,"to_count":0,"type":"rem","conflict":false,"from_lines":["    #   data                =
        json[&quot;data&quot;].symbolize_keys!"]},{"to_lines":["      "],"from_count":1,"to_start":89,"from_start":90,"to_count":1,"type":"mod","conflict":false,"from_lines":["    #"]}],"unified_map":[null,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,null],[86,85],[87,86],[88,87],[89,88],[90,null],[null,89],[91,90],[92,91],[93,92],[94,93],[95,94],[96,95],[97,96],[98,97],[99,98],[100,99],[101,100],[102,101],[103,102],[104,103],[105,104],[106,105],[107,106],[108,107],[109,108],[110,109],[111,110],[112,111],[113,112],[114,113],[115,114],[116,115],[117,116],[118,117],[119,118],[120,119],[121,120],[122,121],[123,122],[124,123],[125,124],[126,125],[127,126],[128,127],[129,128],[130,129],[131,130],[132,131],[133,132],[134,133],[135,134],[136,135],[137,136],[138,137],[139,138],[140,139],[141,140],[142,141],[143,142],[144,143],[145,144],[146,145],[147,146],[148,147],[149,148],[150,149],[151,150],[152,151],[153,152],[154,153],[155,154],[156,155],[157,156],[158,157],[159,158],[160,159],[161,160],[162,161],[163,162],[164,163],[165,164],[166,165],[167,166],[168,167],[169,168],[170,169],[171,170],[172,171]],"note":null,"from_lines_per_page":100,"to_file":{"meta":{"numLines":171,"position":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172],"longestLine":{"html":"        policy.update_attribute
        :cancels_on, Time.at(subscription[:current_period_end].to_i).to_datetime"},"name":"to","filename":"app\/controllers\/web_hooks\/stripe_controller.rb"},"pages":[[{"html":"##","gutters":[]},{"html":"##
        Web Hooks that are implemented here:","gutters":[]},{"html":"#","gutters":[]},{"html":"#
        =&gt; invoice.created","gutters":[]},{"html":"# =&gt; invoice.payment_succeeded","gutters":[]},{"html":"#
        =&gt; invoice.payment_failed","gutters":[]},{"html":"# =&gt; ping","gutters":[]},{"html":"#
        =&gt; customer.subscription.deleted","gutters":[]},{"html":"#","gutters":[]},{"html":"#
        for more information on all available events: https:\/\/stripe.com\/docs\/api#event_types","gutters":[]},{"html":"##","gutters":[]},{"html":"class
        WebHooks::StripeController &lt; ApplicationController","gutters":[]},{"html":"  protect_from_forgery
        :except =&gt; :process_web_hook","gutters":[]},{"html":"  layout false","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        hello","gutters":[]},{"html":"    render :text =&gt; &quot;Hello there cowboy&quot;","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        process_web_hook","gutters":[]},{"html":"    # get the correct method from
        the type passed in by stripe","gutters":[]},{"html":"    method = params[:type].gsub(&#39;.&#39;,&#39;_&#39;).to_sym","gutters":[]},{"html":"","gutters":[]},{"html":"    #
        if the method exists, and livemode == true, send it along","gutters":[]},{"html":"    if
        self.private_methods.include?(method) &amp;&amp; params[:livemode]","gutters":[]},{"html":"      send
        method, params","gutters":[]},{"html":"    else","gutters":[]},{"html":"      head
        :ok","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  private
        #-----------------------------------------------","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        send_support_message(json, e)","gutters":[]},{"html":"    SupportMailer.send_generic_stripe_hook_notification(json,
        e).deliver!","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  ##
        process the deletion of a plan from Stripe","gutters":[]},{"html":"  def plan_deleted(json)","gutters":[]},{"html":"    begin","gutters":[]},{"html":"      stripe_plan_data
        = json[:data][:object]","gutters":[]},{"html":"","gutters":[]},{"html":"      if
        stripe_plan_data[:interval] == &#39;year&#39;","gutters":[]},{"html":"        plan
        = Plan.marked_for_deletion.find_by :annual_plan_stripe_id =&gt; stripe_plan_data[:id]","gutters":[]},{"html":"      else","gutters":[]},{"html":"        plan
        = Plan.marked_for_deletion.find_by :monthly_plan_stripe_id =&gt; stripe_plan_data[:id]","gutters":[]},{"html":"      end","gutters":[]},{"html":"","gutters":[]},{"html":"      unless
        plan.nil?","gutters":[]},{"html":"        plan.destroy","gutters":[]},{"html":"      end","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok","gutters":[]},{"html":"","gutters":[]},{"html":"    rescue Exception
        =&gt; e","gutters":[]},{"html":"      send_support_message(json, e)","gutters":[]},{"html":"      render
        status: :conflict, json: { errors: e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  #
        Occurs whenever a failed charge attempt occurs.","gutters":[]},{"html":"  def
        charge_failed(json)","gutters":[]},{"html":"    begin","gutters":[]},{"html":"      AdminMailer.charge_failed(
        json ).deliver","gutters":[]},{"html":"      head :ok","gutters":[]},{"html":"    rescue
        Exception =&gt; e","gutters":[]},{"html":"      send_support_message(json,
        e)","gutters":[]},{"html":"      render status: :conflict, json: { errors:
        e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        invoice_created(json)","gutters":[]},{"html":"    begin","gutters":[]},{"html":"      MembersMailer.invoice_created(json[:data][:object][:customer],
        json[:data][:object][:id]).deliver","gutters":[]},{"html":"      head :ok","gutters":[]},{"html":"    rescue
        Exception =&gt; e","gutters":[]},{"html":"      send_support_message(json,
        e)","gutters":[]},{"html":"      render status: :conflict, json: { errors:
        e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  ##
        A Policy has been successfully created","gutters":[]},{"html":"  def customer_subscription_created(json)","gutters":[]},{"html":"    begin","gutters":[]},{"start":true,"html":"      subscription_policy
        = SubscriptionUpdatePolicy.new(json[:data])","gutters":[]},{"html":"      subscription        =
        subscription_policy.subscription","gutters":[]},{"html":"      member              =
        Member.find subscription[:customer]","gutters":[]},{"html":"      policy              =
        member.current_policy","gutters":[]},{"end":true,"start":true,"html":"      ","gutters":[],"change":true},{"html":"      unless
        policy.status_active?","gutters":[]},{"html":"        policy.activate! if
        subscription[:status] == &#39;active&#39;","gutters":[]},{"html":"      end","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok","gutters":[]},{"html":"    rescue Exception =&gt; e","gutters":[]},{"html":"      send_support_message(json,
        e)","gutters":[]},{"html":"      render status: :conflict, json: { errors:
        e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]}],[{"html":"  #
        def charge_succeeded(json)","gutters":[]},{"html":"  #   ## this method does
        nothing at the moment.  Doesn&#39;t need to.","gutters":[]},{"html":"  # end","gutters":[]},{"html":"","gutters":[]},{"html":"  ##
        Process updates to a subscription","gutters":[]},{"html":"  ## TODO: Should
        all of this logic be moved to a Service Object?","gutters":[]},{"html":"  def
        customer_subscription_updated(json)","gutters":[]},{"html":"    begin","gutters":[]},{"html":"      subscription_policy
        = SubscriptionUpdatePolicy.new(json[:data])","gutters":[]},{"html":"      subscription        =
        subscription_policy.subscription","gutters":[]},{"html":"      member              =
        Member.find subscription[:customer]","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok and return if member.nil? || member.current_policy.nil?","gutters":[]},{"html":"","gutters":[]},{"html":"      policy              =
        member.current_policy","gutters":[]},{"html":"","gutters":[]},{"html":"      if
        subscription_policy.canceled_at_end_of_term?","gutters":[]},{"html":"        policy.update_attribute
        :cancels_on, Time.at(subscription[:current_period_end].to_i).to_datetime","gutters":[]},{"html":"        policy.update_attribute
        :renews_on, nil","gutters":[]},{"html":"        MembersMailer.send_cancellation_confirmation(member.id.to_s).deliver","gutters":[]},{"html":"      else","gutters":[]},{"html":"        policy.update_attribute
        :renews_on, Time.at(subscription[:current_period_end].to_i).to_datetime","gutters":[]},{"html":"        policy.update_attribute
        :cancels_on, nil","gutters":[]},{"html":"      end","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok","gutters":[]},{"html":"    rescue Exception =&gt; e","gutters":[]},{"html":"      send_support_message(json,
        e)","gutters":[]},{"html":"      render status: :conflict, json: { errors:
        e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  #
        ## Policy has been canceled, or closed.","gutters":[]},{"html":"  def customer_subscription_deleted(json)","gutters":[]},{"html":"    begin","gutters":[]},{"html":"      subscription_policy
        = SubscriptionUpdatePolicy.new(json[:data])","gutters":[]},{"html":"      subscription        =
        subscription_policy.subscription","gutters":[]},{"html":"      member              =
        Member.find subscription[:customer]","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok and return if member.nil? || member.current_policy.nil?","gutters":[]},{"html":"","gutters":[]},{"html":"      policy              =
        member.current_policy","gutters":[]},{"html":"","gutters":[]},{"html":"      if
        subscription_policy.canceled?","gutters":[]},{"html":"        policy.cancel!","gutters":[]},{"html":"      end","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok","gutters":[]},{"html":"    rescue Exception =&gt; e","gutters":[]},{"html":"      send_support_message(json,
        e)","gutters":[]},{"html":"      render status: :conflict, json: { errors:
        e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  #
        Occurs whenever an invoice attempts to be paid, and the payment succeeds.","gutters":[]},{"html":"  def
        invoice_payment_succeeded(json)","gutters":[]},{"html":"    begin","gutters":[]},{"html":"      stripe_data   =
        json[:data][:object]","gutters":[]},{"html":"      total         = stripe_data[:total]
        || stripe_data[:amount]","gutters":[]},{"html":"      date          = stripe_data[:date]
        || stripe_data[:created]","gutters":[]},{"html":"","gutters":[]},{"html":"      MembersMailer.invoice_payment_succeeded(
        stripe_data[:customer], total, date ).deliver","gutters":[]},{"html":"","gutters":[]},{"html":"      head
        :ok","gutters":[]},{"html":"    rescue Exception =&gt; e","gutters":[]},{"html":"      send_support_message(json,
        e)","gutters":[]},{"html":"      render status: :conflict, json: { errors:
        e.message }","gutters":[]},{"html":"    end","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"end","gutters":[]}]],"block_num":0},"from_pages_per_block":10},{"from_file":{"meta":{"numLines":24,"position":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"longestLine":{"html":"    @subscription[:cancel_at_period_end]
        &amp;&amp; !@previous_attributes[:cancel_at_period_end]"},"name":"from","filename":"app\/policies\/subscription_update_policy.rb"},"pages":[[{"html":"##","gutters":[]},{"html":"##","gutters":[]},{"html":"class
        SubscriptionUpdatePolicy","gutters":[]},{"html":"  def initialize(stripe_data)","gutters":[]},{"html":"    @subscription         =
        stripe_data[:object]","gutters":[]},{"end":true,"start":true,"html":"    @previous_attributes  =
        stripe_data.fetch(:previous_attributes, {}).symbolize_keys!","gutters":[],"change":true},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        subscription","gutters":[]},{"html":"    @subscription","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        previous_attributes","gutters":[]},{"html":"    @previous_attributes","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        canceled_at_end_of_term?","gutters":[]},{"html":"    @subscription[:cancel_at_period_end]
        &amp;&amp; !@previous_attributes[:cancel_at_period_end]","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        canceled?","gutters":[]},{"html":"    @subscription[:status] == &#39;canceled&#39;","gutters":[]},{"html":"  end","gutters":[]},{"html":"end","gutters":[]}]],"block_num":0},"hunks":[{"to_lines":["    @previous_attributes  =
        stripe_data.fetch(:previous_attributes, {})"],"from_count":1,"to_start":6,"from_start":6,"to_count":1,"type":"mod","conflict":false,"from_lines":["    @previous_attributes  =
        stripe_data.fetch(:previous_attributes, {}).symbolize_keys!"]}],"unified_map":[null,[1,1],[2,2],[3,3],[4,4],[5,5],[6,null],[null,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24]],"note":null,"from_lines_per_page":100,"to_file":{"meta":{"numLines":24,"position":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"longestLine":{"html":"    @subscription[:cancel_at_period_end]
        &amp;&amp; !@previous_attributes[:cancel_at_period_end]"},"name":"to","filename":"app\/policies\/subscription_update_policy.rb"},"pages":[[{"html":"##","gutters":[]},{"html":"##","gutters":[]},{"html":"class
        SubscriptionUpdatePolicy","gutters":[]},{"html":"  def initialize(stripe_data)","gutters":[]},{"html":"    @subscription         =
        stripe_data[:object]","gutters":[]},{"end":true,"start":true,"html":"    @previous_attributes  =
        stripe_data.fetch(:previous_attributes, {})","gutters":[],"change":true},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        subscription","gutters":[]},{"html":"    @subscription","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        previous_attributes","gutters":[]},{"html":"    @previous_attributes","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        canceled_at_end_of_term?","gutters":[]},{"html":"    @subscription[:cancel_at_period_end]
        &amp;&amp; !@previous_attributes[:cancel_at_period_end]","gutters":[]},{"html":"  end","gutters":[]},{"html":"","gutters":[]},{"html":"  def
        canceled?","gutters":[]},{"html":"    @subscription[:status] == &#39;canceled&#39;","gutters":[]},{"html":"  end","gutters":[]},{"html":"end","gutters":[]}]],"block_num":0},"from_pages_per_block":10}]'
    http_version: 
  recorded_at: Fri, 13 Mar 2015 22:06:11 GMT
recorded_with: VCR 2.9.3
